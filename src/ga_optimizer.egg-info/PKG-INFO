Metadata-Version: 2.4
Name: ga_optimizer
Version: 0.0.1
Summary: A genetic algorithm for fuel blending optimization.
Author-email: Example Author <author@example.com>
Project-URL: Homepage, https://github.com/example/ga-optimizer
Project-URL: Bug Tracker, https://github.com/example/ga-optimizer/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: deap
Requires-Dist: pydantic
Requires-Dist: matplotlib
Requires-Dist: seaborn
Dynamic: license-file
Dynamic: requires-dist

# GA Optimizer

A flexible and extensible genetic algorithm for fuel blending optimization.

## Project Structure

The project is organized into the following main directories:

- `ga_optimizer/`: The main source code for the library.
  - `src/`: The Python package source.
    - `algorithms/`: Core algorithm implementations (GA, local search, hybrid).
    - `core/`: Core abstractions and interfaces.
    - `data/`: Data providers and repositories.
    - `domain/`: Business domain models and logic.
    - `evaluation/`: Evaluation and fitness functions.
    - `initialization/`: Population initialization strategies.
    - `services/`: Application services for orchestration.
    - `utils/`: Utility functions.
    - `cli/`: Command-line interface.
- `tests/`: Test suite.
- `examples/`: Example scripts.
- `config/`: Configuration files.
- `requirements/`: Dependency files.
- `docs/`: Documentation.

## Installation

1.  Clone the repository:
    ```bash
    git clone <repository-url>
    cd ga-optimizer
    ```

2.  Create and activate a virtual environment:
    ```bash
    python -m venv venv
    source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
    ```

3.  Install the dependencies:
    ```bash
    pip install -r requirements/development.txt
    ```

4.  Install the package in editable mode:
    ```bash
    pip install -e .
    ```

## Usage

### Running the Optimization from the CLI

You can run the optimization using the command-line interface:

```bash
ga-optimizer
```

### Running the Examples

To run the example scripts:

```bash
python examples/basic_optimization.py
python examples/multi_objective_example.py
```

## Running the Tests

To run the test suite:

```bash
python -m unittest discover -s tests
```
